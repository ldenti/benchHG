diff --git a/consensus.c b/consensus.c
index 6ba23f2b..15d9df42 100644
--- a/consensus.c
+++ b/consensus.c
@@ -320,7 +320,7 @@ static void destroy_data(args_t *args)
     destroy_chain(args->chain);
 }
 
-static void init_region(args_t *args, char *line)
+void init_region(args_t *args, char *line)
 {
     char *ss, *se = line;
     while ( *se && !isspace(*se) && *se!=':' ) se++;
@@ -358,12 +358,12 @@ static void init_region(args_t *args, char *line)
     args->vcf_rbuf.n = 0;
     bcf_sr_seek(args->files,line,args->fa_ori_pos);
     if ( tmp_ptr ) *tmp_ptr = tmp;
-    fprintf(args->fp_out,">%s%s\n",args->chr_prefix?args->chr_prefix:"",line);
+    // fprintf(args->fp_out,">%s%s\n",args->chr_prefix?args->chr_prefix:"",line);
     if ( args->chain_fname )
         args->chain = init_chain(args->chain, args->fa_ori_pos);
 }
 
-static bcf1_t **next_vcf_line(args_t *args)
+bcf1_t **next_vcf_line(args_t *args)
 {
     if ( args->vcf_rbuf.n )
     {
@@ -551,12 +551,12 @@ static int iupac_set_allele(args_t *args, bcf1_t *rec)
     if ( fallback_alt >= 0 ) return fallback_alt;
     return ialt;
 }
-static void apply_variant(args_t *args, bcf1_t *rec)
+int apply_variant(args_t *args, bcf1_t *rec)
 {
     static int warned_haplotype = 0;
 
     if ( args->absent_allele ) apply_absent(args, rec->pos);
-    if ( rec->n_allele==1 && !args->missing_allele && !args->absent_allele ) { return; }
+    if ( rec->n_allele==1 && !args->missing_allele && !args->absent_allele ) { return 1; }
 
     int i,j;
     if ( args->mask )
@@ -567,7 +567,7 @@ static void apply_variant(args_t *args, bcf1_t *rec)
         for (i=0; i<args->nmask; i++)
         {
             mask_t *mask = &args->mask[i];
-            if ( MASK_SKIP(mask) && regidx_overlap(mask->idx, chr,start,end,NULL) ) return;
+            if ( MASK_SKIP(mask) && regidx_overlap(mask->idx, chr,start,end,NULL) ) return 1;
         }
     }
 
@@ -576,7 +576,7 @@ static void apply_variant(args_t *args, bcf1_t *rec)
     {
         bcf_unpack(rec, BCF_UN_FMT);
         bcf_fmt_t *fmt = bcf_get_fmt(args->hdr, rec, "GT");
-        if ( !fmt ) return;
+        if ( !fmt ) return 1;
         if ( fmt->type!=BCF_BT_INT8 )
             error("Todo: GT field represented with BCF_BT_INT8, too many alleles at %s:%"PRId64"?\n",bcf_seqname(args->hdr,rec),(int64_t) rec->pos+1);
         ialt = -1;
@@ -587,14 +587,14 @@ static void apply_variant(args_t *args, bcf1_t *rec)
             uint8_t *ptr = fmt->p + fmt->size*args->smpl->idx[i];
             is_set += iupac_add_gt(args, rec, ptr, fmt->n);
         }
-        if ( !is_set && !args->missing_allele ) return;
+        if ( !is_set && !args->missing_allele ) return 1;
         if ( is_set ) ialt = iupac_set_allele(args, rec);
     }
     else if ( args->isample >= 0 )
     {
         bcf_unpack(rec, BCF_UN_FMT);
         bcf_fmt_t *fmt = bcf_get_fmt(args->hdr, rec, "GT");
-        if ( !fmt ) return;
+        if ( !fmt ) return 1;
 
         if ( fmt->type!=BCF_BT_INT8 )
             error("Todo: GT field represented with BCF_BT_INT8, too many alleles at %s:%"PRId64"?\n",bcf_seqname(args->hdr,rec),(int64_t) rec->pos+1);
@@ -615,7 +615,7 @@ static void apply_variant(args_t *args, bcf1_t *rec)
             {
                 if ( bcf_gt_is_missing(ptr[fmt->n-1]) || bcf_gt_is_missing(ptr[0]) )
                 {
-                    if ( !args->missing_allele ) return;
+                    if ( !args->missing_allele ) return 1;
                     ialt = -1;
                 }
                 else
@@ -625,7 +625,7 @@ static void apply_variant(args_t *args, bcf1_t *rec)
                         fprintf(stderr, "Can't apply %d-th haplotype at %s:%"PRId64". (This warning is printed only once.)\n", args->haplotype,bcf_seqname(args->hdr,rec),(int64_t) rec->pos+1);
                         warned_haplotype = 1;
                     }
-                    return;
+                    return 1;
                 }
             }
             else
@@ -633,7 +633,7 @@ static void apply_variant(args_t *args, bcf1_t *rec)
                 ialt = (int8_t)ptr[args->haplotype-1];
                 if ( bcf_gt_is_missing(ialt) || ialt==bcf_int8_vector_end )
                 {
-                    if ( !args->missing_allele ) return;
+                    if ( !args->missing_allele ) return 1;
                     ialt = -1;
                 }
                 else
@@ -645,7 +645,7 @@ static void apply_variant(args_t *args, bcf1_t *rec)
             ialt = -1;
             iupac_init(args,rec);
             int is_set = iupac_add_gt(args, rec, ptr, fmt->n);
-            if ( !is_set && !args->missing_allele ) return;
+            if ( !is_set && !args->missing_allele ) return 1;
             if ( is_set ) ialt = iupac_set_allele(args, rec);
         }
         else
@@ -655,7 +655,7 @@ static void apply_variant(args_t *args, bcf1_t *rec)
             {
                 if ( bcf_gt_is_missing(ptr[i]) )
                 {
-                    if ( !args->missing_allele ) return;  // ignore missing or half-missing genotypes
+                    if ( !args->missing_allele ) return 1;  // ignore missing or half-missing genotypes
                     ialt = -1;
                     break;
                 }
@@ -695,7 +695,7 @@ static void apply_variant(args_t *args, bcf1_t *rec)
         {
             // ref allele
             if ( args->absent_allele ) freeze_ref(args,rec);
-            return;
+            return 1;
         }
         if ( rec->n_allele <= ialt ) error("Broken VCF, too few alts at %s:%"PRId64"\n", bcf_seqname(args->hdr,rec),(int64_t) rec->pos+1);
     }
@@ -733,7 +733,7 @@ static void apply_variant(args_t *args, bcf1_t *rec)
     {
         // non-missing reference
         if ( args->absent_allele ) freeze_ref(args,rec);
-        return;
+        return 1;
     }
     if ( ialt==-1 )
     {
@@ -777,8 +777,8 @@ static void apply_variant(args_t *args, bcf1_t *rec)
 
         if ( overlap )
         {
-            fprintf(stderr,"The site %s:%"PRId64" overlaps with another variant, skipping...\n", bcf_seqname(args->hdr,rec),(int64_t) rec->pos+1);
-            return;
+            // fprintf(stderr,"The site %s:%"PRId64" overlaps with another variant, skipping...\n", bcf_seqname(args->hdr,rec),(int64_t) rec->pos+1);
+            return 2;
         }
 
     }
@@ -791,7 +791,7 @@ static void apply_variant(args_t *args, bcf1_t *rec)
     if ( idx<0 )
     {
         fprintf(stderr,"Warning: ignoring overlapping variant starting at %s:%"PRId64"\n", bcf_seqname(args->hdr,rec),(int64_t) rec->pos+1);
-        return;
+        return 1;
     }
     if ( rec->rlen > args->fa_buf.l - idx )
     {
@@ -846,7 +846,7 @@ static void apply_variant(args_t *args, bcf1_t *rec)
         {
             // <*>  or <NON_REF> .. gVCF, evidence for the reference allele throughout the whole block
             freeze_ref(args,rec);
-            return;
+            return 1;
         }
     }
     else if ( strncasecmp(rec->d.allele[0],args->fa_buf.s+idx,rec->rlen) )
